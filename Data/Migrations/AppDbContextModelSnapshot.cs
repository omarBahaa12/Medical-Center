// <auto-generated />
using System;
using Data.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppintmentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppintmentStatusId");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Data.Entities.AppointmentStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Appointmentstatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppointmentsStatus", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Appointmentstatus = "Pending"
                        },
                        new
                        {
                            ID = 2,
                            Appointmentstatus = "Confirmed"
                        },
                        new
                        {
                            ID = 3,
                            Appointmentstatus = "Completed"
                        },
                        new
                        {
                            ID = 4,
                            Appointmentstatus = "Canceled"
                        },
                        new
                        {
                            ID = 5,
                            Appointmentstatus = "Rescheduled"
                        },
                        new
                        {
                            ID = 6,
                            Appointmentstatus = "No Show"
                        });
                });

            modelBuilder.Entity("Data.Entities.MedicalRecords", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("PersonID");

                    b.ToTable("MedicalRecords", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("DateBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar");

                    b.HasKey("ID");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("TypeName").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Data.Entities.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("MedicalRecordId")
                        .IsUnique();

                    b.ToTable("Prescriptions", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Specialization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar");

                    b.HasKey("ID");

                    b.ToTable("Specializations", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            SpecializationName = "surgery"
                        },
                        new
                        {
                            ID = 2,
                            SpecializationName = "Pediatrics"
                        },
                        new
                        {
                            ID = 3,
                            SpecializationName = "Obstetrics and gynecology"
                        },
                        new
                        {
                            ID = 4,
                            SpecializationName = "Internal medicine"
                        },
                        new
                        {
                            ID = 5,
                            SpecializationName = "Orthopedics"
                        },
                        new
                        {
                            ID = 6,
                            SpecializationName = "Ear - nose medicine"
                        },
                        new
                        {
                            ID = 7,
                            SpecializationName = "ophthalmology"
                        },
                        new
                        {
                            ID = 8,
                            SpecializationName = "Neurology"
                        });
                });

            modelBuilder.Entity("Data.Entities.Doctor", b =>
                {
                    b.HasBaseType("Data.Entities.Person");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doc");
                });

            modelBuilder.Entity("Data.Entities.Patient", b =>
                {
                    b.HasBaseType("Data.Entities.Person");

                    b.HasDiscriminator().HasValue("Pat");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasBaseType("Data.Entities.Person");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasDiscriminator().HasValue("Use");
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.HasOne("Data.Entities.AppointmentStatus", "Appointmentstatus")
                        .WithMany("appointments")
                        .HasForeignKey("AppintmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointmentstatus");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.MedicalRecords", b =>
                {
                    b.HasOne("Data.Entities.Appointment", "Appointment")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Person", null)
                        .WithMany("MedicalRecods")
                        .HasForeignKey("PersonID");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Data.Entities.Payment", b =>
                {
                    b.HasOne("Data.Entities.Appointment", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("Data.Entities.Payment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Data.Entities.Prescription", b =>
                {
                    b.HasOne("Data.Entities.MedicalRecords", "MedicalRecords")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("Data.Entities.Doctor", b =>
                {
                    b.HasOne("Data.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Data.Entities.AppointmentStatus", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("Data.Entities.MedicalRecords", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Data.Entities.Person", b =>
                {
                    b.Navigation("MedicalRecods");
                });

            modelBuilder.Entity("Data.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Data.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
